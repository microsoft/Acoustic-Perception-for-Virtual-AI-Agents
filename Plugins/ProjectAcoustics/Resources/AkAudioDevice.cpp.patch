

/** PROJECT ACOUSTICS MOD
*
* Sets multiple obstruction and occlusion values for multiple emitter positions set via SetMultiplePositions
*
*/
AKRESULT FAkAudioDevice::SetMultipleObstructionAndOcclusion(
    const UAkComponent * const in_pEmitter,
    const UAkComponent * const in_pListener,
    TArray<float> in_ObstructionValues,
    TArray<float> in_OcclusionValues
)
{
    if ((in_ObstructionValues.Num() < 1) ||
        (in_OcclusionValues.Num() < 1) ||
        (in_ObstructionValues.Num() != in_OcclusionValues.Num())
        )
    {
        AKASSERT(false && "Bad obstruction/occlusion pairing passed.");
        return AK_Fail;
    }
    AKRESULT eResult = AK_Success;
    int numPairs = in_ObstructionValues.Num();
    if (m_bSoundEngineInitialized)
    {
        const AkGameObjectID emitterId = in_pEmitter ? in_pEmitter->GetAkGameObjectID() : DUMMY_GAMEOBJ;
        const AkGameObjectID listenerId = in_pListener ? in_pListener->GetAkGameObjectID() : DUMMY_GAMEOBJ;
        // Use spatial audio if registered. Just use the first Occlusion/Obstruction Value in this case...
        if (UsingSpatialAudioRooms(in_pListener->GetWorld()))
        {
#if AK_WWISESDK_VERSION_MAJOR == 2017 || AK_WWISESDK_VERSION_MAJOR == 2019
            eResult = AK::SoundEngine::SetObjectObstructionAndOcclusion(emitterId, listenerId, in_ObstructionValues[0], in_OcclusionValues[0]);
#else // If Wwise 2018
            eResult = AK::SpatialAudio::SetEmitterObstructionAndOcclusion(emitterId, in_ObstructionValues[0], in_OcclusionValues[0]);
#endif
        }
        else
        {
            TArray<AkObstructionOcclusionValues> valuePairs;
            for (int i = 0; i < numPairs; i++)
            {
                AkObstructionOcclusionValues valuePair;
                valuePair.obstruction = in_ObstructionValues[i];
                valuePair.occlusion = in_OcclusionValues[i];
                valuePairs.Add(valuePair);
            }
            eResult = AK::SoundEngine::SetMultipleObstructionAndOcclusion(
                emitterId,
                listenerId,
                valuePairs.GetData(),
                valuePairs.Num()
            );
        }
    }
    return eResult;
}

AKRESULT FAkAudioDevice::SendPluginCustomGameData(AkUniqueID in_busID, AkGameObjectID in_busObjectID, AkPluginType in_eType, AkUInt32 in_uCompanyID, AkUInt32 in_uPluginID, const void *in_pData, AkUInt32 in_uSizeInBytes)
{
    if (m_bSoundEngineInitialized)
    {
        return AK::SoundEngine::SendPluginCustomGameData(in_busID, in_busObjectID, in_eType, in_uCompanyID, in_uPluginID, in_pData, in_uSizeInBytes);
    }
    return AK_Fail;
}